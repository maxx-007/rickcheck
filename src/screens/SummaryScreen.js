import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  TextInput,
  Alert,
  ScrollView,
  Modal,
  SafeAreaView,
  Share,
} from 'react-native';
import { FareCalculator } from '../utils/FareCalculator';
import FareComparisonChart from '../components/FareComparisonChart';
import TripMap from '../components/TripMap';

const SummaryScreen = ({ route, navigation }) => {
  const { tripData } = route.params;
  const fareCalculator = new FareCalculator();

  const [actualFareInput, setActualFareInput] = useState('');
  const [actualFare, setActualFare] = useState(0);
  const [tampering, setTampering] = useState(null);
  const [showMap, setShowMap] = useState(false);
  const [showDetails, setShowDetails] = useState(false);

  // Calculate final fare
  const calculatedFare = fareCalculator.calculateTotalFare(
    tripData.distance,
    tripData.waitingTime,
    tripData.isNightTime
  );

  // Handle fare comparison
  const compareFares = () => {
    const inputFare = parseFloat(actualFareInput);
    
    if (isNaN(inputFare) || inputFare <= 0) {
      Alert.alert('Invalid Input', 'Please enter a valid fare amount.');
      return;
    }

    setActualFare(inputFare);
    
    const tamperingResult = fareCalculator.detectTampering(calculatedFare, inputFare, 0.1);
    setTampering(tamperingResult);

    if (tamperingResult.isTampered) {
      Alert.alert(
        '⚠️ Potential Fare Tampering Detected!',
        `The charged fare differs by ${tamperingResult.percentageDiff.toFixed(1)}% from the official rate.\n\n` +
        `Official Fare: ₹${calculatedFare}\n` +
        `Charged Fare: ₹${inputFare}\n` +
        `Difference: ₹${tamperingResult.difference.toFixed(0)}\n\n` +
        `${tamperingResult.overcharged ? 'You may have been overcharged.' : 'The fare seems lower than expected.'}`,
        [
          { text: 'OK', style: 'default' },
          { text: 'Report Issue', onPress: reportIssue },
        ]
      );
    } else {
      Alert.alert(
        '✅ Fair Fare Confirmed',
        `The charged fare matches the official rate within acceptable limits.`,
        [{ text: 'OK' }]
      );
    }
  };

  // Report tampering issue
  const reportIssue = () => {
    Alert.alert(
      'Report Issue',
      'Would you like to save this trip report for evidence?',
      [
        { text: 'Cancel', style: 'cancel' },
        { text: 'Save Report', onPress: saveReport },
        { text: 'Share Report', onPress: shareReport },
      ]
    );
  };

  // Save trip report
  const saveReport = () => {
    // In a real app, this would save to device storage or cloud
    Alert.alert('Report Saved', 'Trip report has been saved to your device.');
  };

  // Share trip report
  const shareReport = async () => {
    try {
      const reportText = generateReportText();
      await Share.share({
        message: reportText,
        title: 'RickCheck Trip Report',
      });
    } catch (error) {
      console.error('Error sharing report:', error);
    }
  };

  // Generate report text
  const generateReportText = () => {
    const startTime = new Date(tripData.startTime).toLocaleString();
    const endTime = new Date(tripData.endTime).toLocaleString();
    
    return `
RickCheck Trip Report
====================

Trip Details:
• Start Time: ${startTime}
• End Time: ${endTime}
• Distance: ${tripData.distance.toFixed(2)} km
• Duration: ${Math.floor(tripData.duration / 60)}:${Math.floor(tripData.duration % 60).toString().padStart(2, '0')}
• Waiting Time: ${tripData.waitingTime.toFixed(1)} minutes
• Halts: ${tripData.halts.length}
• Night Rate: ${tripData.isNightTime ? 'Yes (+25%)' : 'No'}

Fare Analysis:
• Official Fare: ₹${calculatedFare}
• Charged Fare: ₹${actualFare}
• Difference: ₹${tampering?.difference.toFixed(0) || 0}
• Percentage Diff: ${tampering?.percentageDiff.toFixed(1) || 0}%
• Status: ${tampering?.isTampered ? '⚠️ POTENTIAL TAMPERING' : '✅ FAIR FARE'}

Generated by RickCheck App
Maharashtra Auto-Rickshaw Fare Calculator
    `.trim();
  };

  // Format time
  const formatTime = (timestamp) => {
    return new Date(timestamp).toLocaleTimeString();
  };

  // Format duration
  const formatDuration = (seconds) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = Math.floor(seconds % 60);

    if (hours > 0) {
      return `${hours}h ${minutes}m`;
    }
    return `${minutes}m ${secs}s`;
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        
        {/* Trip Summary Header */}
        <View style={styles.summaryHeader}>
          <Text style={styles.headerTitle}>Trip Completed</Text>
          <Text style={styles.headerSubtitle}>
            {formatTime(tripData.startTime)} - {formatTime(tripData.endTime)}
          </Text>
        </View>

        {/* Quick Stats */}
        <View style={styles.quickStats}>
          <View style={styles.statCard}>
            <Text style={styles.statNumber}>{tripData.distance.toFixed(2)}</Text>
            <Text style={styles.statLabel}>km</Text>
          </View>
          <View style={styles.statCard}>
            <Text style={styles.statNumber}>{formatDuration(tripData.duration)}</Text>
            <Text style={styles.statLabel}>Duration</Text>
          </View>
          <View style={styles.statCard}>
            <Text style={styles.statNumber}>₹{calculatedFare}</Text>
            <Text style={styles.statLabel}>Fair Fare</Text>
          </View>
        </View>

        {/* Fare Calculation Details */}
        <View style={styles.fareDetails}>
          <Text style={styles.sectionTitle}>Fare Breakdown</Text>
          
          <View style={styles.fareRow}>
            <Text style={styles.fareLabel}>Base Fare ({tripData.distance.toFixed(2)} km @ ₹17.14/km)</Text>
            <Text style={styles.fareValue}>₹{Math.round(tripData.distance * 17.14)}</Text>
          </View>
          
          {tripData.waitingTime > 0 && (
            <View style={styles.fareRow}>
              <Text style={styles.fareLabel}>Waiting Charges ({tripData.waitingTime.toFixed(1)} min)</Text>
              <Text style={styles.fareValue}>₹{Math.round(tripData.waitingTime * 1.714)}</Text>
            </View>
          )}
          
          {tripData.isNightTime && (
            <View style={styles.fareRow}>
              <Text style={styles.fareLabel}>Night Surcharge (25%)</Text>
              <Text style={styles.fareValue}>₹{Math.round(calculatedFare * 0.2)}</Text>
            </View>
          )}
          
          <View style={[styles.fareRow, styles.totalRow]}>
            <Text style={styles.totalLabel}>Total Official Fare</Text>
            <Text style={styles.totalValue}>₹{calculatedFare}</Text>
          </View>
        </View>

        {/* Actual Fare Input */}
        <View style={styles.inputSection}>
          <Text style={styles.sectionTitle}>Fare Verification</Text>
          <Text style={styles.inputLabel}>Enter the fare charged by driver:</Text>
          
          <View style={styles.inputContainer}>
            <Text style={styles.currencySymbol}>₹</Text>
            <TextInput
              style={styles.fareInput}
              value={actualFareInput}
              onChangeText={setActualFareInput}
              placeholder="0"
              keyboardType="numeric"
              maxLength={5}
            />
            <TouchableOpacity style={styles.compareButton} onPress={compareFares}>
              <Text style={styles.compareButtonText}>Check</Text>
            </TouchableOpacity>
          </View>
        </View>

        {/* Tampering Result */}
        {tampering && (
          <View style={[
            styles.tamperingResult,
            tampering.isTampered ? styles.tamperingDetected : styles.fairFare
          ]}>
            <Text style={styles.tamperingIcon}>
              {tampering.isTampered ? '⚠️' : '✅'}
            </Text>
            <Text style={styles.tamperingTitle}>
              {tampering.isTampered ? 'Potential Tampering Detected' : 'Fair Fare Confirmed'}
            </Text>
            <Text style={styles.tamperingDetails}>
              Difference: ₹{tampering.difference.toFixed(0)} ({tampering.percentageDiff.toFixed(1)}%)
            </Text>
            {tampering.isTampered && (
              <TouchableOpacity style={styles.reportButton} onPress={reportIssue}>
                <Text style={styles.reportButtonText}>Report Issue</Text>
              </TouchableOpacity>
            )}
          </View>
        )}

        {/* Fare Comparison Chart */}
        {actualFare > 0 && (
          <FareComparisonChart
            calculatedFare={calculatedFare}
            actualFare={actualFare}
            isTampered={tampering?.isTampered}
          />
        )}

        {/* Trip Details */}
        <View style={styles.tripDetails}>
          <Text style={styles.sectionTitle}>Trip Details</Text>
          
          <TouchableOpacity
            style={styles.detailRow}
            onPress={() => setShowDetails(!showDetails)}
          >
            <Text style={styles.detailLabel}>Halts & Waiting Time</Text>
            <Text style={styles.expandIcon}>{showDetails ? '▲' : '▼'}</Text>
          </TouchableOpacity>
          
          {showDetails && (
            <View style={styles.haltsList}>
              {tripData.halts.map((halt, index) => (
                <View key={index} style={styles.haltItem}>
                  <Text style={styles.haltTime}>
                    {formatTime(halt.startTime)} - {formatTime(halt.endTime)}
                  </Text>
                  <Text style={styles.haltDuration}>
                    {Math.floor(halt.duration / 60)}m {Math.floor(halt.duration % 60)}s
                  </Text>
                </View>
              ))}
              {tripData.halts.length === 0 && (
                <Text style={styles.noHalts}>No significant halts detected</Text>
              )}
            </View>
          )}
        </View>

        {/* Action Buttons */}
        <View style={styles.actionButtons}>
          <TouchableOpacity
            style={styles.mapButton}
            onPress={() => setShowMap(true)}
          >
            <Text style={styles.actionButtonText}>🗺️ View Route</Text>
          </TouchableOpacity>
          
          <TouchableOpacity
            style={styles.shareButton}
            onPress={shareReport}
          >
            <Text style={styles.actionButtonText}>📤 Share Report</Text>
          </TouchableOpacity>
        </View>

        {/* New Ride Button */}
        <TouchableOpacity
          style={styles.newRideButton}
          onPress={() => navigation.navigate('Ride')}
        >
          <Text style={styles.newRideText}>Start New Ride</Text>
        </TouchableOpacity>

      </ScrollView>

      {/* Map Modal */}
      <Modal
        visible={showMap}
        animationType="slide"
        onRequestClose={() => setShowMap(false)}
      >
        <SafeAreaView style={styles.modalContainer}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Trip Route</Text>
            <TouchableOpacity
              style={styles.closeButton}
              onPress={() => setShowMap(false)}
            >
              <Text style={styles.closeButtonText}>✕</Text>
            </TouchableOpacity>
          </View>
          <TripMap tripData={tripData} />
        </SafeAreaView>
      </Modal>

    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  scrollView: {
    flex: 1,
    padding: 20,
  },
  summaryHeader: {
    backgroundColor: '#2196F3',
    borderRadius: 15,
    padding: 20,
    alignItems: 'center',
    marginBottom: 20,
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
    marginBottom: 5,
  },
  headerSubtitle: {
    fontSize: 14,
    color: '#E3F2FD',
  },
  quickStats: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  statCard: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 15,
    alignItems: 'center',
    flex: 1,
    marginHorizontal: 5,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  statNumber: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 5,
  },
  statLabel: {
    fontSize: 12,
    color: '#666',
    fontWeight: '500',
  },
  fareDetails: {
    backgroundColor: 'white',
    borderRadius: 15,
    padding: 20,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 15,
  },
  fareRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  fareLabel: {
    fontSize: 14,
    color: '#666',
    flex: 1,
  },
  fareValue: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333',
  },
  totalRow: {
    borderBottomWidth: 0,
    borderTopWidth: 2,
    borderTopColor: '#2196F3',
    paddingTop: 15,
    marginTop: 10,
  },
  totalLabel: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  totalValue: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#2196F3',
  },
  inputSection: {
    backgroundColor: 'white',
    borderRadius: 15,
    padding: 20,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  inputLabel: {
    fontSize: 14,
    color: '#666',
    marginBottom: 10,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 2,
    borderColor: '#ddd',
    borderRadius: 10,
    backgroundColor: '#f9f9f9',
  },
  currencySymbol: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    paddingLeft: 15,
  },
  fareInput: {
    flex: 1,
    fontSize: 18,
    fontWeight: 'bold',
    padding: 15,
    color: '#333',
  },
  compareButton: {
    backgroundColor: '#2196F3',
    paddingHorizontal: 20,
    paddingVertical: 15,
    borderTopRightRadius: 8,
    borderBottomRightRadius: 8,
  },
  compareButtonText: {
    color: 'white',
    fontWeight: 'bold',
  },
  tamperingResult: {
    borderRadius: 15,
    padding: 20,
    marginBottom: 20,
    alignItems: 'center',
  },
  tamperingDetected: {
    backgroundColor: '#FFEBEE',
    borderColor: '#F44336',
    borderWidth: 2,
  },
  fairFare: {
    backgroundColor: '#E8F5E8',
    borderColor: '#4CAF50',
    borderWidth: 2,
  },
  tamperingIcon: {
    fontSize: 32,
    marginBottom: 10,
  },
  tamperingTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
    textAlign: 'center',
  },
  tamperingDetails: {
    fontSize: 14,
    color: '#666',
    marginBottom: 15,
    textAlign: 'center',
  },
  reportButton: {
    backgroundColor: '#F44336',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 20,
  },
  reportButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 14,
  },
  tripDetails: {
    backgroundColor: 'white',
    borderRadius: 15,
    padding: 20,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  detailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 10,
  },
  detailLabel: {
    fontSize: 14,
    color: '#666',
    flex: 1,
  },
  expandIcon: {
    fontSize: 12,
    color: '#2196F3',
    fontWeight: 'bold',
  },
  haltsList: {
    marginTop: 10,
    paddingTop: 10,
    borderTopWidth: 1,
    borderTopColor: '#f0f0f0',
  },
  haltItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 8,
    paddingHorizontal: 10,
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
    marginVertical: 2,
  },
  haltTime: {
    fontSize: 12,
    color: '#666',
  },
  haltDuration: {
    fontSize: 12,
    fontWeight: '600',
    color: '#FF6B35',
  },
  noHalts: {
    fontSize: 14,
    color: '#999',
    textAlign: 'center',
    fontStyle: 'italic',
    paddingVertical: 10,
  },
  actionButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  mapButton: {
    backgroundColor: '#4CAF50',
    borderRadius: 10,
    padding: 15,
    flex: 1,
    marginRight: 10,
    alignItems: 'center',
  },
  shareButton: {
    backgroundColor: '#FF9800',
    borderRadius: 10,
    padding: 15,
    flex: 1,
    marginLeft: 10,
    alignItems: 'center',
  },
  actionButtonText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 14,
  },
  newRideButton: {
    backgroundColor: '#2196F3',
    borderRadius: 25,
    padding: 18,
    alignItems: 'center',
    marginBottom: 20,
  },
  newRideText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
  modalContainer: {
    flex: 1,
    backgroundColor: 'white',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  closeButton: {
    width: 30,
    height: 30,
    borderRadius: 15,
    backgroundColor: '#f0f0f0',
    justifyContent: 'center',
    alignItems: 'center',
  },
  closeButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#666',
  },
});

export default SummaryScreen;